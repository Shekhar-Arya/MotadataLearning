Operator in Java is a symbol that is used to perform operations. For example: +, -, *, / etc.   

There are many types of operators in Java which are given below:

Unary Operator,
Arithmetic Operator,
Shift Operator,
Relational Operator,
Bitwise Operator,
Logical Operator,
Ternary Operator and
Assignment Operator.

Operator Type	                Category	        Precedence

Unary	                        postfix	            expr++ expr--
                                prefix	            ++expr --expr +expr -expr ~ !

Arithmetic	                    multiplicative	    * / %
                                additive	        + -

Shift	                        shift	            << >> 

Relational	                    comparison	        < > <= >= instanceof
                                equality	        == !=

Bitwise	                        bitwise             AND	&
                                bitwise             inclusive OR	|

Logical	                        logical             AND	&&
                                logical             OR	||

Ternary	                        ternary	            ? :

Assignment	                    assignment	        = += -= *= /= %= &= ^= |= <<= >>= >>>=


Java Left Shift Operator
The Java left shift operator << is used to shift all of the bits in a value to the left side of a specified number of times.
System.out.println(10<<2);//10*2^2=10*4=40  

Java Right Shift Operator
The Java right shift operator >> is used to move the value of the left operand to right by the number of bits specified by the right operand.
System.out.println(10>>2);//10/2^2=10/4=2  


Java AND Operator Example: Logical && and Bitwise &
The logical && operator doesn't check the second condition if the first condition is false. It checks the second condition only if the first one is true.
The bitwise & operator always checks both conditions whether first condition is true or false.


Java OR Operator Example: Logical || and Bitwise |
The logical || operator doesn't check the second condition if the first condition is true. It checks the second condition only if the first one is false.
The bitwise | operator always checks both conditions whether first condition is true or false.


